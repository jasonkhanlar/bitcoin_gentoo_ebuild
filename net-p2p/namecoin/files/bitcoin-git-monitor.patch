diff --git db.cpp db.cpp
index 336d5a5..ac48812 100644
--- db.cpp
+++ db.cpp
@@ -594,6 +594,7 @@ bool CWalletDB::LoadWallet()
     //// todo: shouldn't we catch exceptions and try to recover and continue?
     CRITICAL_BLOCK(cs_mapKeys)
     CRITICAL_BLOCK(cs_mapWallet)
+    CRITICAL_BLOCK(cs_mapMonitored)
     {
         // Get cursor
         Dbc* pcursor = GetCursor();
@@ -622,6 +623,18 @@ bool CWalletDB::LoadWallet()
                 ssKey >> strAddress;
                 ssValue >> mapAddressBook[strAddress];
             }
+            else if (strType == "monitoraddress")
+            {
+                string strAddress;
+                ssKey >> strAddress;
+                ssValue >> mapMonitorAddress[strAddress];
+            }
+            else if (strType == "monitorblocks")
+            {
+                string url;
+                ssKey >> url;
+                ssValue >> mapMonitorBlocks[url];
+            }
             else if (strType == "tx")
             {
                 uint256 hash;
diff --git db.h db.h
index dac277a..33c5fd6 100644
--- db.h
+++ db.h
@@ -424,6 +424,41 @@ public:
         return Write(make_pair(string("setting"), strKey), value);
     }
 
+    bool ReadMonitorAddress(const string& strAddress, set<string>& urls)
+    {
+        urls.clear();
+        return Read(make_pair(string("monitoraddress"), strAddress), urls);
+    }
+
+    bool WriteMonitorAddress(const string& strAddress, const set<string>& strURL)
+    {
+        nWalletDBUpdated++;
+        return Write(make_pair(string("monitoraddress"), strAddress), strURL);
+    }
+
+    bool EraseMonitorAddress(const string& strAddress)
+    {
+        nWalletDBUpdated++;
+        return Erase(make_pair(string("monitoraddress"), strAddress));
+    }
+
+    bool ReadMonitorBlocks(const string& url, int& lastpost)
+    {
+        return Read(make_pair(string("monitorblocks"), url), lastpost);
+    }
+
+    bool WriteMonitorBlocks(const string& url, int lastpost)
+    {
+        nWalletDBUpdated++;
+        return Write(make_pair(string("monitorblocks"), url), lastpost);
+    }
+
+    bool EraseMonitorBlocks(const string& url)
+    {
+        nWalletDBUpdated++;
+        return Erase(make_pair(string("monitorblocks"), url));
+    }
+
     bool LoadWallet();
 protected:
     void ReserveKeyFromKeyPool(int64& nIndex, CKeyPool& keypool);
diff --git init.cpp init.cpp
index 63ebfb0..753d565 100644
--- init.cpp
+++ init.cpp
@@ -420,7 +420,10 @@ bool AppInit2(int argc, char* argv[])
         wxMessageBox("Error: CreateThread(StartNode) failed", "Bitcoin");
 
     if (mapArgs.count("-server") || fDaemon)
+    {
         CreateThread(ThreadRPCServer, NULL);
+        CreateThread(ThreadHTTPPOST, NULL);
+    }
 
 #if defined(__WXMSW__) && defined(GUI)
     if (fFirstRun)
diff --git main.cpp main.cpp
index 569ea53..ce39b0a 100644
--- main.cpp
+++ main.cpp
@@ -53,6 +53,10 @@ CCriticalSection cs_mapAddressBook;
 
 vector<unsigned char> vchDefaultKey;
 
+CCriticalSection cs_mapMonitored;
+map<string, set<string> > mapMonitorAddress;
+map<string, int> mapMonitorBlocks;
+
 double dHashesPerSec;
 int64 nHPSTimerStart;
 
@@ -308,6 +312,38 @@ int64 CTxIn::GetDebit() const
     return 0;
 }
 
+//
+// Get sending BC address (probably a one-time-use generated address)
+//
+string CTxIn::Address() const
+{
+    CRITICAL_BLOCK(cs_mapTransactions)
+    {
+        if (mapTransactions.count(prevout.hash))
+            return mapTransactions[prevout.hash].vout[prevout.n].Address();
+    }
+    CTxIndex txindex;
+    CTransaction txPrev;
+    bool fFound = CTxDB("r").ReadTxIndex(prevout.hash, txindex);
+    if (!fFound || !txPrev.ReadFromDisk(txindex.pos) || prevout.n >= txPrev.vout.size())
+        return "";
+    return txPrev.vout[prevout.n].Address();
+}
+
+//
+// Get receiving BC address
+//
+string CTxOut::Address() const
+{
+    vector<unsigned char> vchPubKey;
+    if (ExtractPubKey(scriptPubKey, false, vchPubKey))
+        return PubKeyToAddress(vchPubKey);
+    uint160 hash160;
+    if (ExtractHash160(scriptPubKey, hash160))
+        return Hash160ToAddress(hash160);
+    return "";
+}
+
 int64 CWalletTx::GetTxTime() const
 {
     if (!fTimeReceivedIsTxTime && hashBlock != 0)
@@ -607,6 +643,10 @@ bool CTransaction::AcceptToMemoryPool(CTxDB& txdb, bool fCheckInputs, bool* pfMi
     if (ptxOld)
         EraseFromWallet(ptxOld->GetHash());
 
+    // POST about this transaction if any (potential) monitors:
+    if (!mapMonitorAddress.empty())
+        monitorTransaction(*this, NULL);
+
     printf("AcceptToMemoryPool(): accepted %s\n", hash.ToString().substr(0,10).c_str());
     return true;
 }
@@ -1511,6 +1551,9 @@ bool CBlock::AcceptBlock()
                 if (nBestHeight > (pnode->nStartingHeight != -1 ? pnode->nStartingHeight - 2000 : 55000))
                     pnode->PushInventory(CInv(MSG_BLOCK, hash));
 
+    if (hashBestChain == hash && (!mapMonitorAddress.empty() || !mapMonitorBlocks.empty()))
+        monitorBlock(mapBlockIndex[hash]);
+
     return true;
 }
 
diff --git main.h main.h
index d4293b1..1db37c7 100644
--- main.h
+++ main.h
@@ -47,6 +47,10 @@ extern vector<unsigned char> vchDefaultKey;
 extern double dHashesPerSec;
 extern int64 nHPSTimerStart;
 
+extern CCriticalSection cs_mapMonitored;
+extern map<string, set<string> > mapMonitorAddress; // mapMonitorAddress[address] = listof(urls)
+extern map<string, int> mapMonitorBlocks; // mapMonitorBlocks[url] = depth_of_last_successful_post
+
 // Settings
 extern int fGenerateBitcoins;
 extern int64 nTransactionFee;
@@ -284,6 +288,7 @@ public:
 
     bool IsMine() const;
     int64 GetDebit() const;
+    string Address() const;
 };
 
 
@@ -368,6 +373,8 @@ public:
     {
         printf("%s\n", ToString().c_str());
     }
+
+    string Address() const;
 };
 
 
diff --git net.cpp net.cpp
index 82b3ffb..b1890be 100644
--- net.cpp
+++ net.cpp
@@ -1374,7 +1374,7 @@ bool StopNode()
     fShutdown = true;
     nTransactionsUpdated++;
     int64 nStart = GetTime();
-    while (vnThreadsRunning[0] > 0 || vnThreadsRunning[2] > 0 || vnThreadsRunning[3] > 0 || vnThreadsRunning[4] > 0)
+    while (std::accumulate(vnThreadsRunning.begin(), vnThreadsRunning.end(), 0) > 0)
     {
         if (GetTime() - nStart > 20)
             break;
@@ -1385,6 +1385,7 @@ bool StopNode()
     if (vnThreadsRunning[2] > 0) printf("ThreadMessageHandler still running\n");
     if (vnThreadsRunning[3] > 0) printf("ThreadBitcoinMiner still running\n");
     if (vnThreadsRunning[4] > 0) printf("ThreadRPCServer still running\n");
+    if (vnThreadsRunning[5] > 0) printf("ThreadHTTPPOST still running\n");
     while (vnThreadsRunning[2] > 0 || vnThreadsRunning[4] > 0)
         Sleep(20);
     Sleep(50);
diff --git rpc.cpp rpc.cpp
index 88e44cc..8dc12ff 100644
--- rpc.cpp
+++ rpc.cpp
@@ -11,6 +11,7 @@
 #include <boost/asio/ssl.hpp> 
 typedef boost::asio::ssl::stream<boost::asio::ip::tcp::socket> SSLStream;
 #endif
+#include <boost/xpressive/xpressive_dynamic.hpp>
 #include "json/json_spirit_reader_template.h"
 #include "json/json_spirit_writer_template.h"
 #include "json/json_spirit_utils.h"
@@ -24,6 +25,7 @@ using namespace boost::asio;
 using namespace json_spirit;
 
 void ThreadRPCServer2(void* parg);
+void ThreadHTTPPOST2(void* parg);
 typedef Value(*rpcfn_type)(const Array& params, bool fHelp);
 extern map<string, rpcfn_type> mapCallTable;
 
@@ -379,7 +381,7 @@ Value sendtoaddress(const Array& params, bool fHelp)
     string strError = SendMoneyToBitcoinAddress(strAddress, nAmount, wtx);
     if (strError != "")
         throw JSONRPCError(-4, strError);
-    return "sent";
+    return wtx.GetHash().GetHex();
 }
 
 
@@ -655,10 +657,263 @@ Value backupwallet(const Array& params, bool fHelp)
 }
 
 
+Value monitoraddress(const Array& params, bool fHelp)
+{
+    if (fHelp || params.size() < 2 || params.size() > 3)
+        throw runtime_error(
+            "monitoraddress <bitcoinaddress> <url> [monitor=true]\n"
+            "When coins are sent to <bitcoinaddress> POST JSON transaction info to <url>.\n"
+            "If <bitcoinaddress> is 'allwallet' then monitor coins sent to all of your addresses.\n"
+            "Pass false as third param to stop monitoring.");
+
+    string strAddress = params[0].get_str();
+    if (strAddress != "allwallet" && !IsValidBitcoinAddress(strAddress))
+        throw runtime_error("Invalid bitcoin address.");
+
+    string url = params[1].get_str();
+    bool fMonitor = true;
+    if (params.size() > 2)
+        fMonitor = params[2].get_bool();
+    if (!fMonitor)
+    {
+        CRITICAL_BLOCK(cs_mapMonitored)
+        {
+            if (mapMonitorAddress.count(strAddress))
+            {
+                set<string> urls = mapMonitorAddress[strAddress];
+                set<string>::iterator i = urls.find(url);
+                if (i != urls.end())
+                    urls.erase(i);
+                if (urls.empty())
+                {
+                    mapMonitorAddress.erase(strAddress);
+                    CWalletDB().EraseMonitorAddress(strAddress);
+                }
+                else
+                {
+                    mapMonitorAddress[strAddress] = urls;
+                    CWalletDB().WriteMonitorAddress(strAddress, urls);
+                }
+            }
+        }
+        return "stopped monitoring "+strAddress;
+    }
+
+    CRITICAL_BLOCK(cs_mapMonitored)
+    {
+        mapMonitorAddress[strAddress].insert(url);
+        CWalletDB().WriteMonitorAddress(strAddress, mapMonitorAddress[strAddress]);
+    }
+
+    return "monitoring "+strAddress;
+}
+
+Value listmonitored(const Array& params, bool fHelp)
+{
+    if (fHelp || params.size() != 0)
+        throw runtime_error(
+            "listmonitored\n"
+            "Returns list describing where blocks and transactions are being POSTed.");
+
+
+    Array ret;
+    CRITICAL_BLOCK(cs_mapMonitored)
+    {
+        foreach(const PAIRTYPE(string, int)& item, mapMonitorBlocks)
+        {
+            const string& strURL = item.first;
+            int lastpost = item.second;
+            Object obj;
+            obj.push_back(Pair("what",          "blocks"));
+            obj.push_back(Pair("url",           strURL));
+            obj.push_back(Pair("lastpost",      lastpost));
+            ret.push_back(obj);
+        }
+        foreach(const PAIRTYPE(string, set<string>)& item, mapMonitorAddress)
+        {
+            const string& strAddress = item.first;
+            foreach (const string& strURL, item.second)
+            {
+                Object obj;
+                obj.push_back(Pair("what",          "address"));
+                obj.push_back(Pair("address",       strAddress));
+                obj.push_back(Pair("url",           strURL));
+                ret.push_back(obj);
+            }
+        }
+    }
+    return ret;
+}
+
+Object txToJSON(const CTransaction& transaction, const CBlockIndex* blockindex)
+{
+    Object result;
+
+    uint256 txhash = transaction.GetHash();
+    string txid = txhash.GetHex();
+    result.push_back(Pair("txid", txid));
+    Array txins;
+    foreach (const CTxIn& txin, transaction.vin)
+    {
+        if (txin.prevout.IsNull())
+            continue;
+        Array t;
+        t.push_back(txin.prevout.hash.GetHex());
+        t.push_back((int)txin.prevout.n);
+        txins.push_back(t);
+    }
+    result.push_back(Pair("from", txins));
+    Array txouts;
+    foreach (const CTxOut& txout, transaction.vout)
+    {
+        Array t;
+        t.push_back(txout.Address());
+        t.push_back((double)txout.nValue / (double)COIN );
+        txouts.push_back(t);
+    }
+    result.push_back(Pair("to", txouts));
+
+    if (blockindex)
+    {
+        result.push_back(Pair("block", blockindex->GetBlockHash().GetHex()));
+        result.push_back(Pair("confirmations", nBestHeight-blockindex->nHeight+1));
+    }
+    else
+        result.push_back(Pair("confirmations", 0));
+
+    if (mapWallet.count(txhash))
+        result.push_back(Pair("time", (boost::int64_t)mapWallet[txhash].GetTxTime()));
+    else if (blockindex)
+        result.push_back(Pair("time", (boost::int64_t)blockindex->GetMedianTime()));
+
+    return result;
+}
+
+Object blockToJSON(const CBlock& block, const CBlockIndex* blockindex)
+{
+    Object result;
+    result.push_back(Pair("hash", block.GetHash().GetHex()));
+    result.push_back(Pair("blockcount", blockindex->nHeight));
+    result.push_back(Pair("version", block.nVersion));
+    result.push_back(Pair("merkleroot", block.hashMerkleRoot.GetHex()));
+    result.push_back(Pair("time", (boost::int64_t)block.GetBlockTime()));
+    result.push_back(Pair("bits", (boost::uint64_t)block.nBits));
+    result.push_back(Pair("nonce", (boost::uint64_t)block.nNonce));
+    Array txhashes;
+    foreach (const CTransaction&tx, block.vtx)
+        txhashes.push_back(tx.GetHash().GetHex());
+    result.push_back(Pair("tx", txhashes));
+
+    if (blockindex->pprev)
+        result.push_back(Pair("previousblock", blockindex->pprev->GetBlockHash().GetHex()));
+    if (blockindex->pnext)
+        result.push_back(Pair("nextblock", blockindex->pnext->GetBlockHash().GetHex()));
+    return result;
+}
+
+Value monitorblocks(const Array& params, bool fHelp)
+{
+    if (fHelp || params.size() < 1 || params.size() > 3)
+        throw runtime_error(
+            "monitorblocks <url> [monitor=true] [startblockcount=0]\n"
+            "POST block information to <url> as blocks are added to the block chain.\n"
+            "[monitor] true will start monitoring, false will stop.\n"
+            "Pass [startblockcount] to start monitoring at/after block with given blockcount.");
+    string url = params[0].get_str();
+    bool fMonitor = true;
+    int nStartBlockCount = 0;
+    if (params.size() > 1)
+        fMonitor = params[1].get_bool();
+    if (params.size() > 2)
+        nStartBlockCount = params[2].get_int();
+
+    CRITICAL_BLOCK(cs_mapMonitored)
+    {
+        if (!fMonitor)
+        { // Stop POSTing to url
+            mapMonitorBlocks.erase(url);
+            CWalletDB().EraseMonitorBlocks(url);
+        }
+        else
+        {
+            mapMonitorBlocks[url] = nStartBlockCount;
+            CWalletDB().WriteMonitorBlocks(url, nStartBlockCount);
+        }
+    }
+    return Value::null;
+}
+
+Value getblock(const Array& params, bool fHelp)
+{
+    if (fHelp || params.size() != 1)
+        throw runtime_error(
+            "getblock <hash|number>\n"
+            "Returns details of the block with <hash> (64-char hexadecimal) or <number>.");
+    
+    string hashOrNumber = params[0].get_str();
+    CBlockIndex *pblockindex = NULL;
+    if (hashOrNumber.size() == 64)
+    {
+        uint256 hash(params[0].get_str());
+        if (mapBlockIndex.count(hash) == 0)
+            throw runtime_error("block hash not found.");
+        pblockindex = mapBlockIndex[hash];
+    }
+    else
+    {
+        int nHeight = atoi(hashOrNumber);
+        if (nHeight < 0 || nHeight > nBestHeight)
+            throw runtime_error("Block number out of range.");
+
+        CRITICAL_BLOCK(cs_main)
+        {
+            pblockindex = mapBlockIndex[hashBestChain];
+            while (pblockindex->nHeight > nHeight)
+                pblockindex = pblockindex->pprev;
+        }
+    }
+
+    CBlock block;
+    block.ReadFromDisk(pblockindex, true);
+    
+    return blockToJSON(block, pblockindex);
+}
 
+Value gettransaction(const Array& params, bool fHelp)
+{
+    if (fHelp || params.size() != 1)
+        throw runtime_error(
+            "gettransaction <hash>\n"
+            "Returns details of transaction with <hash> (hexadecimal).");
 
+    uint256 txhash;
+    txhash.SetHex(params[0].get_str());
 
+    // Fetch transaction from memory and/or disk
+    CTransaction tx;
+    CTxIndex txindex;
+    bool fOnDisk = CTxDB("r").ReadTxIndex(txhash, txindex);
 
+    if (mapTransactions.count(txhash))
+        tx = mapTransactions[txhash];
+    else if (fOnDisk)
+        if (!tx.ReadFromDisk(txindex.pos))
+            throw runtime_error("Transaction not found.");
+
+    CBlockIndex *blockindex = NULL;
+    if (fOnDisk)
+    {
+        CBlock blockTmp;
+        if (blockTmp.ReadFromDisk(txindex.pos.nFile, txindex.pos.nBlockPos))
+        {
+            uint256 blockhash = blockTmp.GetHash();
+            if (mapBlockIndex.count(blockhash))
+                blockindex = mapBlockIndex[blockhash];
+        }
+    }
+
+    return txToJSON(tx, blockindex);
+}
 
 
 
@@ -695,6 +949,11 @@ pair<string, rpcfn_type> pCallTable[] =
     make_pair("listreceivedbyaddress", &listreceivedbyaddress),
     make_pair("listreceivedbylabel",   &listreceivedbylabel),
     make_pair("backupwallet",          &backupwallet),
+    make_pair("monitoraddress",        &monitoraddress),
+    make_pair("monitorblocks",         &monitorblocks),
+    make_pair("listmonitored",         &listmonitored),
+    make_pair("getblock",              &getblock),
+    make_pair("gettransaction",        &gettransaction),
 };
 map<string, rpcfn_type> mapCallTable(pCallTable, pCallTable + sizeof(pCallTable)/sizeof(pCallTable[0]));
 
@@ -715,6 +974,11 @@ string pAllowInSafeMode[] =
     "getlabel",
     "getaddressesbylabel",
     "backupwallet",
+    "monitoraddress",
+    "monitorblocks",
+    "listmonitored",
+    "getblock",
+    "gettransaction",
 };
 set<string> setAllowInSafeMode(pAllowInSafeMode, pAllowInSafeMode + sizeof(pAllowInSafeMode)/sizeof(pAllowInSafeMode[0]));
 
@@ -728,12 +992,13 @@ set<string> setAllowInSafeMode(pAllowInSafeMode, pAllowInSafeMode + sizeof(pAllo
 // and to be compatible with other JSON-RPC implementations.
 //
 
-string HTTPPost(const string& strMsg, const map<string,string>& mapRequestHeaders)
+string HTTPPost(const string& host, const string& path, const string& strMsg,
+                const map<string,string>& mapRequestHeaders)
 {
     ostringstream s;
-    s << "POST / HTTP/1.1\r\n"
+    s << "POST " << path << " HTTP/1.1\r\n"
       << "User-Agent: json-rpc/1.0\r\n"
-      << "Host: 127.0.0.1\r\n"
+      << "Host: " << host << "\r\n"
       << "Content-Type: application/json\r\n"
       << "Content-Length: " << strMsg.size() << "\r\n"
       << "Accept: application/json\r\n";
@@ -1222,7 +1487,7 @@ Object CallRPC(const string& strMethod, const Array& params)
 
     // Send request
     string strRequest = JSONRPCRequest(strMethod, params, 1);
-    string strPost = HTTPPost(strRequest, mapRequestHeaders);
+    string strPost = HTTPPost("127.0.0.1", "/", strRequest, mapRequestHeaders);
     stream << strPost << std::flush;
 
     // Receive reply
@@ -1308,6 +1573,9 @@ int CommandLineRPC(int argc, char *argv[])
         if (strMethod == "listreceivedbyaddress"  && n > 1) ConvertTo<bool>(params[1]);
         if (strMethod == "listreceivedbylabel"    && n > 0) ConvertTo<boost::int64_t>(params[0]);
         if (strMethod == "listreceivedbylabel"    && n > 1) ConvertTo<bool>(params[1]);
+        if (strMethod == "monitoraddress"         && n > 2) ConvertTo<bool>(params[2]);
+        if (strMethod == "monitorblocks"          && n > 1) ConvertTo<bool>(params[1]);
+        if (strMethod == "monitorblocks"          && n > 2) ConvertTo<boost::int64_t>(params[2]);
 
         // Execute
         Object reply = CallRPC(strMethod, params);
@@ -1358,8 +1626,215 @@ int CommandLineRPC(int argc, char *argv[])
     return nRet;
 }
 
+class CPOSTRequest
+{
+public:
+    CPOSTRequest(const string &_url, const string& _body) : url(_url), body(_body)
+    {
+    }
 
+    virtual bool POST()
+    {
+        using namespace boost::xpressive;
+        // This regex is wrong for IPv6 urls; see http://www.ietf.org/rfc/rfc2732.txt
+        //  (they're weird; e.g  "http://[::FFFF:129.144.52.38]:80/index.html" )
+        // I can live with non-IPv6 urls for now...
+        static sregex url_regex = sregex::compile("^(http)://([^:/]+)(:[0-9]{1,5})?(.*)$");
+
+        boost::xpressive::smatch urlparts;
+        if (!regex_match(url, urlparts, url_regex))
+        {
+            printf("URL PARSING FAILED: %s\n", url.c_str());
+            return true;
+        }
+        string protocol = urlparts[1];
+        string host = urlparts[2];
+        string s_port = urlparts[3];  // Note: includes colon, e.g. ":8080"
+        int port = (protocol == "http" ? 80 : 443);
+        if (s_port.size() > 1) { port = atoi(s_port.c_str()+1); }
+        string path = urlparts[4];
+        map<string, string> headers;
+
+        printf("HTTPPOST to %s:%d%s  %s\n", host.c_str(), port, path.c_str(), body.c_str());
+        // TODO: support SSL/port 443...
+        ip::tcp::iostream stream(host, lexical_cast<string>(port));
+
+        stream << HTTPPost(host, path, body, headers) << std::flush;
+        map<string, string> mapResponseHeaders;
+        string strReply;
+        int status = ReadHTTP(stream, mapResponseHeaders, strReply);
+        printf(" HTTP response %d: %s\n", status, strReply.c_str());
+
+        return (status < 300);
+    }
 
+protected:
+    string url;
+    string body;
+};
+class CMonitorBlockPOST : public CPOSTRequest
+{
+public:
+    CMonitorBlockPOST(const string &_url, const string& _body, int _blockheight) :
+        blockheight(_blockheight), CPOSTRequest(_url, _body)
+    {
+    }
+
+    virtual bool POST()
+    {
+        bool result = CPOSTRequest::POST();
+        if (result)
+        {
+            CRITICAL_BLOCK(cs_mapMonitored)
+            {
+                if (mapMonitorBlocks[url] < blockheight)
+                {
+                    mapMonitorBlocks[url] = blockheight;
+                    CWalletDB().WriteMonitorBlocks(url, blockheight);
+                }
+            }
+        }
+        return result;
+    }
+protected:
+    int blockheight;
+};
+
+static vector<shared_ptr<CPOSTRequest> > vPOSTQueue;
+static CCriticalSection cs_vPOSTQueue;
+
+
+void monitorTransaction(const CTransaction& transaction, const CBlockIndex* pblockindex)
+{
+    CRITICAL_BLOCK(cs_mapMonitored)
+    CRITICAL_BLOCK(cs_vPOSTQueue)
+    {
+        foreach (const CTxOut& txout, transaction.vout)
+        {
+            string address = txout.Address();
+            bool fIsMine = txout.IsMine();
+            if ((mapMonitorAddress.count(address) > 0) ||
+                (mapMonitorAddress.count("allwallet") && fIsMine))
+            {
+                Object txinfo = txToJSON(transaction, pblockindex);
+                txinfo.push_back(Pair("address", address));
+                txinfo.push_back(Pair("amount", (double)txout.nValue / (double)COIN ));
+                if (mapAddressBook.count(address))
+                    txinfo.push_back(Pair("label", mapAddressBook[address]));
+                else
+                    txinfo.push_back(Pair("label", Value()));
+
+                Array params; // JSON-RPC requests are always "params" : [ ... ]
+                params.push_back(txinfo);
+
+                string postBody = JSONRPCRequest("monitortx", params, Value());
+
+                // Schedule POSTs so main thread doesn't block:
+                if (fIsMine) foreach (const string& url, mapMonitorAddress["allwallet"])
+                {
+                    shared_ptr<CPOSTRequest> postRequest(new CPOSTRequest(url, postBody));
+                    vPOSTQueue.push_back(postRequest);
+                }
+                foreach (const string& url, mapMonitorAddress[address])
+                {
+                    shared_ptr<CPOSTRequest> postRequest(new CPOSTRequest(url, postBody));
+                    vPOSTQueue.push_back(postRequest);
+                }
+            }
+        }
+    }
+}
+
+void monitorTransactionsInBlock(const CBlock& block, const CBlockIndex* pblockindex)
+{
+    foreach(const CTransaction& tx, block.vtx)
+        monitorTransaction(tx, pblockindex);
+}
+
+void monitorBlock(const CBlockIndex* pblockindex)
+{
+    // Starting 119 block back, notify monitoring URLs about
+    // transactions and blocks (at 120, 6, and 1 confirmations)
+    int startDepth = max(0, nBestHeight-120+1);
+    const CBlockIndex* pblockindexscan = pblockindex;
+    while (pblockindexscan->nHeight > startDepth)
+        pblockindexscan = pblockindexscan->pprev;
+
+    // Now, scan forward, notifying as we go:
+    for (; pblockindexscan; pblockindexscan = pblockindexscan->pnext)
+    {
+        int nHeight = pblockindexscan->nHeight;
+        int confirmations = nBestHeight - nHeight + 1;
+        if (!(confirmations == 120 || confirmations == 6 || confirmations == 1))
+            continue;
+
+        CBlock block;
+        block.ReadFromDisk(pblockindexscan, true);
+
+        CRITICAL_BLOCK(cs_mapMonitored)
+        CRITICAL_BLOCK(cs_vPOSTQueue)
+        {
+            foreach(const PAIRTYPE(string, int)& item, mapMonitorBlocks)
+            {
+                if (item.second >= nHeight)
+                    continue;
+
+                string url = item.first;
+
+                Array params; // JSON-RPC requests are always "params" : [ ... ]
+                params.push_back(blockToJSON(block, pblockindexscan));
+
+                string postBody = JSONRPCRequest("monitorblock", params, Value());
+
+                shared_ptr<CPOSTRequest> postRequest(new CMonitorBlockPOST(url, postBody, nHeight));
+                vPOSTQueue.push_back(postRequest);
+            }
+        }
+        monitorTransactionsInBlock(block, pblockindexscan);
+    }
+}
+
+void ThreadHTTPPOST(void* parg)
+{
+    IMPLEMENT_RANDOMIZE_STACK(ThreadHTTPPOST(parg));
+    try
+    {
+        vnThreadsRunning[5]++;
+        ThreadHTTPPOST2(parg);
+        vnThreadsRunning[5]--;
+    }
+    catch (std::exception& e) {
+        vnThreadsRunning[5]--;
+        PrintException(&e, "ThreadHTTPPOST()");
+    } catch (...) {
+        vnThreadsRunning[5]--;
+        PrintException(NULL, "ThreadHTTPPOST()");
+    }
+    printf("ThreadHTTPPOST exiting\n");
+}
+
+void ThreadHTTPPOST2(void* parg)
+{
+    printf("ThreadHTTPPOST started\n");
+
+    loop
+    {
+        if (fShutdown)
+            return;
+
+        vector<shared_ptr<CPOSTRequest> > work;
+        CRITICAL_BLOCK(cs_vPOSTQueue)
+        {
+            work = vPOSTQueue;
+            vPOSTQueue.clear();
+        }
+        foreach (shared_ptr<CPOSTRequest> r, work)
+            r->POST();
+
+        if (vPOSTQueue.empty())
+            Sleep(100); // 100ms (1/10 second)
+    }
+}
 
 #ifdef TEST
 int main(int argc, char *argv[])
diff --git rpc.h rpc.h
index 48a7b8a..05166e6 100644
--- rpc.h
+++ rpc.h
@@ -2,5 +2,13 @@
 // Distributed under the MIT/X11 software license, see the accompanying
 // file license.txt or http://www.opensource.org/licenses/mit-license.php.
 
+class CBlock;
+class CTransaction;
+
 void ThreadRPCServer(void* parg);
 int CommandLineRPC(int argc, char *argv[]);
+
+void ThreadHTTPPOST(void* parg);
+
+void monitorTransaction(const CTransaction& transaction, const CBlockIndex* pblockindex);
+void monitorBlock(const CBlockIndex* pblockindex);
